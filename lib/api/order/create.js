// Generated by CoffeeScript 1.12.0
var add_percentage, add_points, call, details;

call = require('../call');

details = require('../../info/details');

add_percentage = require('../../helpers/add/percentage');

add_points = require('../../helpers/add/points');

module.exports = function(config, params, callback) {
  var execute, max, needs_quote, price, sl_is_percentage, sl_is_points, stop_loss, take_profit, tp_is_percentage, tp_is_points;
  stop_loss = params.stop_loss || "";
  take_profit = params.take_profit || "";
  price = params.order_type_parameter || "";
  params.leverage = params.leverage || 1;
  params.margin = params.margin || 0.01;
  params.symbol = params.symbol.toUpperCase();
  needs_quote = false;
  needs_quote = needs_quote || stop_loss.indexOf("%") !== -1;
  needs_quote = needs_quote || take_profit.indexOf("%") !== -1;
  needs_quote = needs_quote || (stop_loss[0] === '-' || stop_loss[0] === '+');
  needs_quote = needs_quote || (take_profit[0] === '-' || take_profit[0] === '+');
  if (typeof params.leverage === 'string') {
    params.leverage = params.leverage.toUpperCase();
    if (['MAX', 'HALF', 'QUARTER'].indexOf(params.leverage) !== -1) {
      max = details[params.symbol].maximum_leverage;
      if (params.leverage === 'MAX') {
        params.leverage = max;
      }
      if (params.leverage === 'HALF') {
        params.leverage = Math.ceil(max / 2);
      }
      if (params.leverage === 'QUARTER') {
        params.leverage = Math.ceil(max / 4);
      }
    }
  }
  if (!stop_loss) {
    delete params.stop_loss;
  }
  if (!take_profit) {
    delete params.take_profit;
  }
  if (!needs_quote) {
    console.log("doesnt need quote, directly call!");
    return call(config, 'order/create', params, callback);
  }
  if (tp_is_percentage = take_profit.indexOf("%") !== -1) {
    take_profit = Number(take_profit.replace("%", ""));
  } else if (tp_is_points = take_profit[0] === '-' || take_profit[0] === '+') {
    take_profit = Number(take_profit);
  }
  if (sl_is_percentage = stop_loss.indexOf("%") !== -1) {
    stop_loss = Number(stop_loss.replace("%", ""));
  } else if (sl_is_points = stop_loss[0] === '-' || stop_loss[0] === '+') {
    stop_loss = Number(stop_loss);
  }
  if (take_profit) {
    take_profit = Math.abs(take_profit);
  }
  if (stop_loss) {
    stop_loss = Math.abs(stop_loss);
  }
  if (params.direction === 'short') {
    take_profit = -take_profit;
  }
  if (params.direction === 'long') {
    stop_loss = -stop_loss;
  }
  execute = function(price) {
    if (tp_is_percentage) {
      take_profit = add_percentage(price, params.leverage, take_profit);
    }
    if (sl_is_percentage) {
      stop_loss = add_percentage(price, params.leverage, stop_loss);
    }
    if (tp_is_points) {
      take_profit = add_points(params.symbol, price, take_profit);
    }
    if (sl_is_points) {
      stop_loss = add_points(params.symbol, price, stop_loss);
    }
    if (take_profit) {
      params.take_profit = take_profit;
    }
    if (stop_loss) {
      params.stop_loss = stop_loss;
    }
    return call(config, 'order/create', params, callback);
  };
  if (params.order_type === 'limit') {
    return execute(price);
  }
  if (params.order_type === 'market') {
    return call(config, 'market/quotes', {
      symbols: params.symbol
    }, function(error, result) {
      if (error) {
        return typeof callback === "function" ? callback(error) : void 0;
      }
      if (params.direction === 'short') {
        price = result.response[0].bid;
      }
      if (params.direction === 'long') {
        price = result.response[0].ask;
      }
      return execute(price);
    });
  }
};
