'use strict';

// Generated by CoffeeScript 2.2.3
var calculate, call;

call = require('../call');

calculate = require('../../helpers/calculate');

module.exports = function (config, params, callback) {
  var calculated, execute, needs_quote, price, sl_is_percentage, sl_is_points, stop_loss, take_profit, tp_is_percentage, tp_is_points;
  stop_loss = params.stop_loss || "";
  take_profit = params.take_profit || "";
  price = params.order_type_parameter || "";
  params.leverage = params.leverage || 1;
  params.margin = params.margin || 0.01;
  params.symbol = params.symbol.toUpperCase();
  if (tp_is_percentage = take_profit.indexOf("%") !== -1) {
    take_profit = Number(take_profit.replace("%", ""));
    take_profit = take_profit + '%';
  } else if (tp_is_points = take_profit[0] === '-' || take_profit[0] === '+') {
    take_profit = Number(take_profit);
    take_profit = '+' + take_profit;
  }
  if (sl_is_percentage = stop_loss.indexOf("%") !== -1) {
    stop_loss = Number(stop_loss.replace("%", ""));
    stop_loss = '-' + stop_loss + '%';
  } else if (sl_is_points = stop_loss[0] === '-' || stop_loss[0] === '+') {
    stop_loss = Number(stop_loss);
    stop_loss = '-' + stop_loss;
  }
  if (!stop_loss) {
    delete params.stop_loss;
  }
  if (!take_profit) {
    delete params.take_profit;
  }
  needs_quote = tp_is_percentage || tp_is_points;
  needs_quote = needs_quote || sl_is_percentage || sl_is_points;
  // if not using or using absolute values for SL / TP
  if (!needs_quote) {
    calculated = calculate(params.symbol, params.leverage, price, params.direction, params.stop_loss, params.take_profit);
    if (calculated.take_profit) {
      params.take_profit = calculated.take_profit;
    }
    if (calculated.stop_loss) {
      params.stop_loss = calculated.stop_loss;
    }
    if (calculated.leverage) {
      params.leverage = calculated.leverage;
    }
    return call(config, 'order/create', params, callback);
  }
  execute = function execute(price) {
    calculated = calculate(params.symbol, params.leverage, price, params.direction, params.stop_loss, params.take_profit);
    if (calculated.take_profit) {
      params.take_profit = calculated.take_profit;
    }
    if (calculated.stop_loss) {
      params.stop_loss = calculated.stop_loss;
    }
    if (calculated.leverage) {
      params.leverage = calculated.leverage;
    }
    return call(config, 'order/create', params, callback);
  };
  if (params.order_type === 'limit') {
    //# if its a limit order we already know all the values
    //# put the order, it's the end of our work!
    return execute(price);
  }
  if (params.order_type === 'market') {
    return call(config, 'market/quotes', {
      symbols: params.symbol
    }, function (error, result) {
      if (error) {
        return typeof callback === "function" ? callback(error) : void 0;
      }
      if (params.direction === 'short') {
        price = result.response[0].bid;
      }
      if (params.direction === 'long') {
        price = result.response[0].ask;
      }
      return execute(price);
    });
  }
};